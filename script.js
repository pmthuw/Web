// ======================= T√åM KI·∫æM S·∫¢N PH·∫®M =======================

// üå∏ H√†m t√¨m ki·∫øm hoa
function searchFlowers() {
  const input = document
    .getElementById("searchInput")
    .value.toLowerCase()
    .trim();
  const products = document.querySelectorAll(".product");
  const noResult = document.getElementById("noResult");

  let found = false;

  products.forEach((product) => {
    const name = product.querySelector("h3").textContent.toLowerCase();
    if (name.includes(input)) {
      product.style.display = "block";
      found = true;
    } else {
      product.style.display = "none";
    }
  });

  // N·∫øu kh√¥ng nh·∫≠p g√¨ ‚Üí hi·ªán l·∫°i t·∫•t c·∫£
  if (input === "") {
    products.forEach((p) => (p.style.display = "block"));
    noResult.style.display = "none";
    return;
  }

  // Hi·ªán th√¥ng b√°o n·∫øu kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m
  noResult.style.display = found ? "none" : "block";
}

// ü™∑ Khi b·∫•m v√†o g·ª£i √Ω t√¨m ki·∫øm
function quickSearch(keyword) {
  const input = document.getElementById("searchInput");
  input.value = keyword;
  searchFlowers();
  const container = document.querySelector(".product-container");
  if (container) {
    window.scrollTo({ top: container.offsetTop - 100, behavior: "smooth" });
  }
}

// ü™∑ T·∫°o g·ª£i √Ω d∆∞·ªõi thanh t√¨m ki·∫øm
function createSuggestions() {
  const suggestionArea = document.createElement("div");
  suggestionArea.className = "suggestions";

  const suggestions = [
    "Hoa h·ªìng",
    "Hoa ng√†y l·ªÖ",
    "Hoa d·ªãp ƒë·∫∑c bi·ªát",
    "Hoa k√≠nh vi·∫øng",
    "Ph·ª• ki·ªán",
  ];

  suggestions.forEach((s) => {
    const btn = document.createElement("button");
    btn.className = "suggestion-btn";
    btn.innerText = s;
    btn.onclick = () => quickSearch(s);
    suggestionArea.appendChild(btn);
  });

  const searchBar = document.querySelector(".search-bar");
  if (searchBar) searchBar.insertAdjacentElement("afterend", suggestionArea);
}

// ======================= GI·ªé H√ÄNG =======================

let cart = JSON.parse(localStorage.getItem("cart")) || [];

// ü™∑ Th√™m s·∫£n ph·∫©m v√†o gi·ªè
function addToCart(name, price, image) {
  const existing = cart.find((item) => item.name === name);
  if (existing) {
    existing.quantity += 1;
  } else {
    cart.push({ name, price, image, quantity: 1 });
  }
  localStorage.setItem("cart", JSON.stringify(cart));
  alert("‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!");
  updateCartCount();
}

// ü™∑ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng hi·ªÉn th·ªã ·ªü g√≥c
function updateCartCount() {
  const cartCount = document.querySelector("#cartCount");
  if (cartCount) {
    const total = cart.reduce((sum, item) => sum + item.quantity, 0);
    cartCount.textContent = total;
  }
}

// ü™∑ Hi·ªÉn th·ªã gi·ªè h√†ng
function showCart() {
  const cartTable = document.querySelector("#cartTable tbody");
  const totalElement = document.querySelector("#cartTotal");
  if (!cartTable || !totalElement) return;

  cartTable.innerHTML = "";
  let total = 0;

  if (cart.length === 0) {
    cartTable.innerHTML = `<tr><td colspan="6">Gi·ªè h√†ng tr·ªëng.</td></tr>`;
    totalElement.textContent = "0ƒë";
    return;
  }

  cart.forEach((item, index) => {
    const priceNum = parseInt(item.price.replace(/\D/g, ""));
    const sum = priceNum * item.quantity;
    total += sum;

    const row = `
            <tr>
                <td><img src="${item.image}" alt="${
      item.name
    }" class="cart-img"></td>
                <td>${item.name}</td>
                <td>${item.price}</td>
                <td><input type="number" min="1" value="${
                  item.quantity
                }" class="qty-input" data-index="${index}"></td>
                <td>${sum.toLocaleString()}ƒë</td>
                <td><button class="remove-btn" data-index="${index}">üóëÔ∏è</button></td>
            </tr>
        `;
    cartTable.innerHTML += row;
  });

  totalElement.textContent = total.toLocaleString() + "ƒë";

  // X√≥a s·∫£n ph·∫©m
  document.querySelectorAll(".remove-btn").forEach((btn) => {
    btn.addEventListener("click", () => {
      cart.splice(btn.dataset.index, 1);
      localStorage.setItem("cart", JSON.stringify(cart));
      showCart();
      updateCartCount();
    });
  });

  // Thay ƒë·ªïi s·ªë l∆∞·ª£ng
  document.querySelectorAll(".qty-input").forEach((input) => {
    input.addEventListener("change", () => {
      const i = input.dataset.index;
      cart[i].quantity = parseInt(input.value);
      localStorage.setItem("cart", JSON.stringify(cart));
      showCart();
      updateCartCount();
    });
  });
}

// ======================= THANH TO√ÅN =======================

function setupCheckout() {
  const totalEl = document.querySelector("#checkoutTotal");
  const form = document.querySelector("#checkoutForm");
  const message = document.querySelector("#checkoutMessage");

  if (!totalEl || !form) return;

  const total = cart.reduce((sum, item) => {
    const price = parseInt(item.price.replace(/\D/g, ""));
    return sum + price * item.quantity;
  }, 0);

  totalEl.textContent = total.toLocaleString() + "ƒë";

  form.addEventListener("submit", (e) => {
    e.preventDefault();
    if (cart.length === 0) {
      alert("Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!");
      return;
    }

    const order = {
      name: form.fullname.value,
      phone: form.phone.value,
      address: form.address.value,
      note: form.note.value,
      payment: form.paymentMethod.value,
      items: cart,
      total: total,
      date: new Date().toLocaleString(),
    };

    localStorage.setItem("lastOrder", JSON.stringify(order));
    localStorage.removeItem("cart");
    cart = [];

    message.innerHTML = `
            <div class="success">
                üéâ C·∫£m ∆°n ${order.name}! ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.<br>
                T·ªïng ti·ªÅn: <b>${total.toLocaleString()}ƒë</b><br>
                Ph∆∞∆°ng th·ª©c: <b>${
                  order.payment === "cash" ? "COD" : "Chuy·ªÉn kho·∫£n"
                }</b><br>
                Ng√†y ƒë·∫∑t: ${order.date}
            </div>
        `;
    form.reset();
    updateCartCount();
  });
}

// ======================= L·ªäCH S·ª¨ MUA H√ÄNG =======================

function showOrderHistory() {
  const historyContainer = document.querySelector("#orderHistory");
  if (!historyContainer) return;

  const order = JSON.parse(localStorage.getItem("lastOrder"));

  if (order) {
    let html = `
            <div class="order-summary">
                <h3>ƒê∆°n h√†ng g·∫ßn nh·∫•t c·ªßa b·∫°n</h3>
                <p><b>Kh√°ch h√†ng:</b> ${order.name}</p>
                <p><b>SƒêT:</b> ${order.phone}</p>
                <p><b>ƒê·ªãa ch·ªâ:</b> ${order.address}</p>
                <p><b>Ng√†y ƒë·∫∑t:</b> ${order.date}</p>
                <p><b>Ph∆∞∆°ng th·ª©c thanh to√°n:</b> ${
                  order.payment === "cash" ? "COD" : "Chuy·ªÉn kho·∫£n"
                }</p>
                <h4>ü™∑ Danh s√°ch s·∫£n ph·∫©m:</h4>
                <div class="order-items">
                    ${order.items
                      .map(
                        (item) => `
                        <div class="order-item">
                            <img src="${item.image}" alt="${item.name}">
                            <div>
                                <h5>${item.name}</h5>
                                <p>S·ªë l∆∞·ª£ng: ${item.quantity}</p>
                                <p>Gi√°: ${item.price}</p>
                            </div>
                        </div>
                    `
                      )
                      .join("")}
                </div>
                <p class="order-total"><b>T·ªïng ti·ªÅn:</b> ${order.total.toLocaleString()}ƒë</p>
            </div>
        `;
    historyContainer.innerHTML = html;
  } else {
    historyContainer.innerHTML = `
            <p>üïäÔ∏è B·∫°n ch∆∞a mua s·∫£n ph·∫©m n√†o.</p>
            <p>H√£y xem c√°c s·∫£n ph·∫©m n·ªïi b·∫≠t d∆∞·ªõi ƒë√¢y:</p>
            <div class="suggested-products">
                <a href="category-hoatinhyeu.html" class="suggest-btn">Hoa T√¨nh Y√™u</a>
                <a href="category-hoangayle.html" class="suggest-btn">Hoa Ng√†y L·ªÖ</a>
                <a href="category-hoagaubong.html" class="suggest-btn">Hoa G·∫•u B√¥ng</a>
                <a href="category-hoagio.html" class="suggest-btn">Hoa Gi·ªè</a>
                <a href="category-phukien.html" class="suggest-btn">Ph·ª• ki·ªán</a>
            </div>
        `;
  }
}

// ======================= KHI TRANG LOAD =======================

document.addEventListener("DOMContentLoaded", () => {
  createSuggestions();
  updateCartCount();
  showCart();
  setupCheckout();
  showOrderHistory();

  // B·∫Øt s·ª± ki·ªán search
  const searchInput = document.getElementById("searchInput");
  if (searchInput) searchInput.addEventListener("keyup", searchFlowers);

  // Th√™m v√†o gi·ªè
  document.querySelectorAll(".cart-btn").forEach((btn) => {
    btn.addEventListener("click", (e) => {
      e.preventDefault();
      const product = btn.closest(".product");
      const name = product.querySelector("h3").innerText;
      const price = product.querySelector("p").innerText.replace("Gi√°: ", "");
      const image = product.querySelector("img").src;
      addToCart(name, price, image);
    });
  });
});

localStorage.setItem(
  "cart",
  JSON.stringify([
    {
      name: "B√≥ hoa H·ªìng ƒë·ªè",
      price: 450000,
      image: "hoahong1.jpg",
      quantity: 1,
    },
  ])
);
